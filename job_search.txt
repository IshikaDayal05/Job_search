
package front;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.*;
import java.util.Objects;
public class Project extends JFrame {
    private static final String JDBC_URL = "jdbc:mysql://localhost:3306/job_search";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "mysql";
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JComboBox<String> userTypeComboBox;
    private JCheckBox createNewAccountCheckbox;
    private String currentUserType;
    public Project() {
        super("Job Search Tool");
        initializeLoginUI();
      }
    private void initializeLoginUI() {
        setLayout(new GridLayout(5, 2));

        JLabel usernameLabel = new JLabel("Username:");
        JLabel passwordLabel = new JLabel("Password:");
        JLabel userTypeLabel = new JLabel("User Type:");
        usernameField = new JTextField();
        passwordField = new JPasswordField();
        userTypeComboBox = new JComboBox<>(new String[]{"Hirer", "Job Seeker"});
        createNewAccountCheckbox = new JCheckBox("Create New Account");
        JButton loginButton = new JButton("Login");
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = usernameField.getText();
                char[] passwordChars = passwordField.getPassword();
                String password = new String(passwordChars);
                String userType = Objects.requireNonNull(userTypeComboBox.getSelectedItem()).toString();
                if (createNewAccountCheckbox.isSelected()) {
                   
                    if (createNewAccount(username, password, userType)) {
                        JOptionPane.showMessageDialog(Project.this, "Account created successfully!");
                        clearFields();
                    } else {
                        JOptionPane.showMessageDialog(Project.this, "Error creating account. Please try again.");
                    }
                } else {
                  
                    if (authenticateUser(username, password, userType)) {
                        JOptionPane.showMessageDialog(Project.this, "Login successful!");
                        
                        currentUserType = userType;

                        
                        if ("Hirer".equals(userType)) {
                            showHirerOptions();
                        } else if ("Job Seeker".equals(userType)) {
                            try {
                                showJobSeekerOptions();
                            } catch (SQLException e1) {
                                e1.printStackTrace();
                            }
                        }

                        clearFields();
                    } else {
                        JOptionPane.showMessageDialog(Project.this, "Authentication failed. Please try again.");
                    }
                }
            }
        });

        JButton exitButton = createStyledButton("Exit");
        exitButton.addActionListener(e -> System.exit(0));

        add(usernameLabel);
        add(usernameField);
        add(passwordLabel);
        add(passwordField);
        add(userTypeLabel);
        add(userTypeComboBox);
        add(new JLabel());
        add(createNewAccountCheckbox);
        add(loginButton);
        add(exitButton);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(300, 150);
        setLocationRelativeTo(null);
        setResizable(false);
        setVisible(true);
    }
 
    private void continueOrExit() {
        int choice = JOptionPane.showConfirmDialog(
                this,
                "Do you want to continue?",
                "Continue or Exit",
                JOptionPane.YES_NO_OPTION);

        if (choice == JOptionPane.YES_OPTION) {
            clearFields();
           
            if ("Hirer".equals(currentUserType)) {
                showHirerOptions();
            } else if ("Job Seeker".equals(currentUserType)) {
                try {
                    showJobSeekerOptions();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        } else {
            
            dispose();  
            new Project().setVisible(true);  
        }
    }

   
     
    private boolean createNewAccount(String username, String password, String userType) {
        try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
             PreparedStatement preparedStatement = connection.prepareStatement(
                     "INSERT INTO users (username, password, user_type) VALUES (?, ?, ?)")) {

            preparedStatement.setString(1, username);
            preparedStatement.setString(2, password);
            preparedStatement.setString(3, userType);

            int rowsAffected = preparedStatement.executeUpdate();
            return rowsAffected > 0;

        } catch (SQLException ex) {
            ex.printStackTrace();
            return false;
        }
    }

    private boolean authenticateUser(String username, String password, String userType) {
        try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
             PreparedStatement preparedStatement = connection.prepareStatement(
                     "SELECT * FROM users WHERE username = ? AND password = ? AND user_type = ?")) {

            preparedStatement.setString(1, username);
            preparedStatement.setString(2, password);
            preparedStatement.setString(3, userType);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                return resultSet.next();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            return false;
        }
    }


    private void clearFields() {
        usernameField.setText("");
        passwordField.setText("");
        userTypeComboBox.setSelectedIndex(0);
        createNewAccountCheckbox.setSelected(false);
    }

    private void showHirerOptions() {
       
        String[] options = {"Add Job Postings", "Update Status", "View Resume", "Exit"};
        int choice = JOptionPane.showOptionDialog(
                this,
                "Select an option:",
                "Hirer Options",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);

        
        switch (choice) {
            case 0:
               
                addJobPostings();
                break;
            case 1:
                
                updateStatus();
                break;
            case 2:
                
                viewResume();
                break;
            case 3:
                
                System.exit(0);
                break;
                
        }
        continueOrExit();
        }
       
    private void showJobSeekerOptions() throws SQLException {
        
        String[] options = {"Search Job Postings", "View All Job Postings", "View Applied Jobs", "Upload Resume", "Delete Resume", "Exit"};
        int choice = JOptionPane.showOptionDialog(
                this,
                "Select an option:",
                "Job Seeker Options",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);

       
        switch (choice) {
            case 0:
                
                searchJobPostings();
                break;
            case 1:
                
                viewAllJobPostings();
                break;
            case 2:
                
                viewAppliedJobs();
                break;
            case 3:
                
                uploadResume();
                break;
            case 4:
                
                deleteResume();
                break;
            case 5:
                
                System.exit(0);
                break;
        }
        continueOrExit();
    }   
   
    private void addJobPostings() {
    	String position = JOptionPane.showInputDialog("Enter the position:");
        String company = JOptionPane.showInputDialog("Enter the company:");
        String location = JOptionPane.showInputDialog("Enter the location:");
        String description = JOptionPane.showInputDialog("Enter the job description:");
        String deadlineString = JOptionPane.showInputDialog("Enter the application deadline (YYYY-MM-DD):");
        Date applicationDeadline = Date.valueOf(deadlineString);

        try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
             PreparedStatement preparedStatement = connection.prepareStatement(
                     "INSERT INTO job_postings (position, company, location, description, application_deadline, status) VALUES (?, ?, ?, ?, ?, 'Open')")) {

            preparedStatement.setString(1, position);
            preparedStatement.setString(2, company);
            preparedStatement.setString(3, location);
            preparedStatement.setString(4, description);
            preparedStatement.setDate(5, applicationDeadline);

            preparedStatement.executeUpdate();

            JOptionPane.showMessageDialog(this, "Job posting added successfully!");
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error adding job posting. Please try again.");
        }
        continueOrExit();
    }



    private void updateStatus() {
    	 try {
             int jobId = Integer.parseInt(JOptionPane.showInputDialog("Enter the ID of the job posting you want to update:"));
             String newStatus = JOptionPane.showInputDialog("Enter the new status ('Open', 'Closed', 'Applied', etc.):");

             try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
                  PreparedStatement preparedStatement = connection.prepareStatement(
                          "UPDATE job_postings SET status = ? WHERE id = ?")) {

                 preparedStatement.setString(1, newStatus);
                 preparedStatement.setInt(2, jobId);

                 int rowsUpdated = preparedStatement.executeUpdate();

                 if (rowsUpdated > 0) {
                     JOptionPane.showMessageDialog(this, "Job status updated successfully!");
                 } else {
                     JOptionPane.showMessageDialog(this, "Job posting not found or status not updated.");
                 }
             }
         } catch (NumberFormatException | SQLException ex) {
             ex.printStackTrace();
             JOptionPane.showMessageDialog(this, "Error updating job status. Please try again.");
         }
    	 continueOrExit();
    }
    
    private void viewResume() {
    	 try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
                 PreparedStatement preparedStatement = connection.prepareStatement(
                         "SELECT resume FROM resumes");
                 ResultSet resultSet = preparedStatement.executeQuery()) {

                if (resultSet.next()) {
                    InputStream inputStream = resultSet.getBinaryStream("resume");
                    byte[] buffer = new byte[1024];
                    int bytesRead;
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();

                    try {
                        while ((bytesRead = inputStream.read(buffer)) != -1) {
                            baos.write(buffer, 0, bytesRead);
                        }

                        byte[] resumeData = baos.toByteArray();

                       
                        displayResume(resumeData);
                    } catch (IOException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error viewing resume. Please try again.");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No resumes found.");
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error viewing resume. Please try again.");
            }
        }
    private void displayResume(byte[] resumeData) {
    	try {
            
            File tempFile = File.createTempFile("resume", ".pdf");
            try (FileOutputStream fos = new FileOutputStream(tempFile)) {
                fos.write(resumeData);
            }

            
            Desktop.getDesktop().open(tempFile);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error displaying resume. Please try again.");
        }
    }
	private JButton createStyledButton(String text) {
        JButton button = new JButton(text);
        button.setBackground(new Color(70, 130, 180)); 
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setFont(new Font("Arial", Font.BOLD, 14));
        return button;
    }

    
    private void searchJobPostings() {
    	 String keywords = JOptionPane.showInputDialog("Enter keywords to search for in job postings:");

         try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
              PreparedStatement preparedStatement = connection.prepareStatement(
                      "SELECT * FROM job_postings WHERE position LIKE ? OR company LIKE ? OR location LIKE ? OR description LIKE ?")) {

             preparedStatement.setString(1, "%" + keywords + "%");
             preparedStatement.setString(2, "%" + keywords + "%");
             preparedStatement.setString(3, "%" + keywords + "%");
             preparedStatement.setString(4, "%" + keywords + "%");

             try (ResultSet resultSet = preparedStatement.executeQuery()) {
                 displayJobPostings(resultSet);
             }
         } catch (SQLException ex) {
             ex.printStackTrace();
             JOptionPane.showMessageDialog(this, "Error searching job postings. Please try again.");
         }
         continueOrExit();
    }
    
    private void viewAllJobPostings() {
    	try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
                PreparedStatement preparedStatement = connection.prepareStatement(
                        "SELECT * FROM job_postings")) {

               try (ResultSet resultSet = preparedStatement.executeQuery()) {
                   displayJobPostings(resultSet);
               }
           } catch (SQLException ex) {
               ex.printStackTrace();
               JOptionPane.showMessageDialog(this, "Error viewing all job postings. Please try again.");
           }
       }

    private void viewAppliedJobs() throws SQLException {
    	try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
                PreparedStatement preparedStatement = connection.prepareStatement(
                        "SELECT * FROM job_postings")) {

    		try (Connection connection1 = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
    	             PreparedStatement preparedStatement1 = connection1.prepareStatement(
    	                     "SELECT * FROM job_postings WHERE status = 'Applied'")) {

    	            try (ResultSet resultSet = preparedStatement1.executeQuery()) {
    	                displayJobPostings(resultSet);
    	            }
    	        } catch (SQLException ex) {
    	            ex.printStackTrace();
    	            JOptionPane.showMessageDialog(this, "Error viewing applied jobs. Please try again.");
    	        }
    	    }
    }
    private void uploadResume() {
    	  JFileChooser fileChooser = new JFileChooser();
          int option = fileChooser.showOpenDialog(this);

          if (option == JFileChooser.APPROVE_OPTION) {
              File selectedFile = fileChooser.getSelectedFile();

              try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
                   PreparedStatement preparedStatement = connection.prepareStatement(
                           "INSERT INTO resumes (resume) VALUES (?)")) {

                  try (FileInputStream fis = new FileInputStream(selectedFile)) {
                      preparedStatement.setBinaryStream(1, fis, (int) selectedFile.length());
                      preparedStatement.executeUpdate();

                      JOptionPane.showMessageDialog(this, "Resume uploaded successfully!");
                  }
              } catch (SQLException | IOException ex) {
                  ex.printStackTrace();
                  JOptionPane.showMessageDialog(this, "Error uploading resume. Please try again.");
              }
          }
      }
    private void displayJobPostings(ResultSet resultSet) throws SQLException {
        StringBuilder message = new StringBuilder("\n--- Job Postings ---\n");
        message.append(String.format("%-5s %-20s %-20s %-15s %-12s %-15s \n",
                "ID", "Position", "Company", "Location", "Deadline", "Status"));

        while (resultSet.next()) {
            int id = resultSet.getInt("id");
            String position = resultSet.getString("position");
            String company = resultSet.getString("company");
            String location = resultSet.getString("location");
            Date deadline = resultSet.getDate("application_deadline");
            String status = resultSet.getString("status");
           

            message.append(String.format("%-5d %-20s %-20s %-15s %-12s %-15s \t\t\n",
                    id, position, company, location, deadline, status));
        }

        JOptionPane.showMessageDialog(this, message.toString());
    }

    private void deleteResume() {
    	try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
                Statement statement = connection.createStatement()) {

               int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete your resume?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

               if (option == JOptionPane.YES_OPTION) {
                   int rowsAffected = statement.executeUpdate("DELETE FROM resumes");
                   if (rowsAffected > 0) {
                       JOptionPane.showMessageDialog(this, "Resume deleted successfully!");
                   } else {
                       JOptionPane.showMessageDialog(this, "No resume found to delete.");
                   }
               }
           } catch (SQLException ex) {
               ex.printStackTrace();
               JOptionPane.showMessageDialog(this, "Error deleting resume. Please try again.");
           }
       }

    public static void main(String[] args) {
        JFrame originalLoginPage = new Project();
        SwingUtilities.invokeLater(() -> new Project().setVisible(true));
    }
}
